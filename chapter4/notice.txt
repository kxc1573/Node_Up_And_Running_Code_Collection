Section 4.1
1.DOM是基于用户交互的用户驱动型时间模型，有着一组与树状结构(HTML、XML等)对应的接口元素。由于操作对象是在一棵树中，所以这个模型包含了“冒泡”和“捕获”的概念，即允许沿着树的结构向上或者向下的元素也接收被触发的事件。
2.因为在浏览器中Event模型是绑定在DOM上的，所以Node创建了EventEmitter类来提供基础的事件功能，EventEmitter的设计包含了其他类扩展所需要的接口类，EventEmitter通常不会直接调用。
EventEmitter提供的最主要的两个方法：on和emit，前者为一个事件创建监听器，后者触发一个事件。
3. 当调用emit时，除了事件的名称，还可以传入任意数目的参数。(4-5.js)
如果传给emit()的参数只有3个或者更少，该方法就走捷径直接调用call方法
否则就会使用较慢的apply方法，以数组的方式传递所有参数
同时监听器被调用的时候是在EventEmitter的上下文中，而不是他们原始的位置。

Section 4.2
1.Node实现的HTTP模块是非阻塞的，且速度很快。
2.http服务类有6个事件、3个方法：
 事件：connection、close、request、checkContinue、upgrade、clientError
 方法：createServer、on、listen
3.http客户端有两个工厂方法:一个通用的方法（http.request）和一个便捷的方法（http.get、http.post等）。
4.url模块提供了解析和处理URL字符串的便利工具，3个方法：parse、format和resolve。

Section 4.3
1.数据流分为可读、可写和可读写，所有的流都是EventEmitter的实例，也就说可以主动触发事件。基本的数据流分块读取和数据池模式。
2.处理异步调用时遇到的主要问题是执行次序具有不确定性，特别是处理文件I/O时，一种常用的方法就是采用回调函数嵌套，但有时也会失去控制。
3.虽然JavaScript支持字节位操作，但它并没有二进制数据的原生表现形式，不过Node带来了Buffer类，为操作二进制数据弥补了短板。
4.创建了一个Buffer后，它的大小就固定了，如果需要添加更多的数，就必须把旧的Buffer复制到一个更大的BUffer中。这是一个特意的设计选择，为了性能而牺牲了一些程序员的开发便利。
5.Node简化了字符串和Buffer的操作，不需要提前计算字符串的长度，直接将字符串做参数传给Buffer的创建函数即可。
6.Buffer.write()写入时会根据指定Buffer的大小选择性地进行尾部截断操作，返回一个数字，表示成功写入多少个字节。