1. Node的事件驱动设计可用来处理大多数情况，它采用的是异步函数和回调的方法；它不适用CPU密集型操作，它应该只负责快速运算和处理返回的结果。
2.  发布-订阅模型（publish-subscribe pattern）
    请求-回复模型（request-reply pattern）
3. 消息队列允许程序员发布事件然后继续其他操作，通过进程间通信频道，提高了并发处理的效率，并实现了更高的扩展性。
4. RabbitMQ是一个消息代理，支持高级消息队列协议（AMQP）。它适用的情景有跨服务器的数据交换和同一台服务器上的跨进程通信。
    npm install -g amqp
5. AMQP和E-mail的概念很像：E-mail消息有其头消息和格式的规范，但内容可以是任何格式，文本、图片或视频都可以；两个公司之间不需要运行同一款E-mail服务器就能通信。AMQP还可以再不同平台间通信。
6. 如果待运行的任务存在阻塞风险，使用队列就很合适；通过增加客户端就可以进一步分散负载，并且避免让未处理的消息落在后面，这种部署就称为“工作队列”
    工作队列的原理是发布的消息再连接到队列的客户端间循环触发。
   通过ack机制实现：如果某个消息的被某个客户端处理，则该消息就会从工作流移除，当该客户端死掉了断开了连接，而该消息仍未得到反馈（ack），该消息将会被再次投放给下一个客户端处理。